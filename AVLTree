This project was developed as part of a data stracture course at Tel Aviv University. It includes a full implementation of an AVL self-balancing binary search tree in Python, with support for insertion, deletion, search, tree balancing through rotations, avl_to_array function that returns an array representing the tree and get_amir_balance_factor function which returns the number of nodes which have BF equals to 0 devided by the total number of nodes. Special attention was gives to the time and space complexity of each method implemented in this project. The implementation ensure optimal performance, maintaining O(log(n)) complexity for search, insertion and deletion operations, O(n) complexity for avl to array operation and O(1) complexity for tree size and amir balance factor operations
